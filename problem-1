//time : k*n^2 : 
//space : K*n 
//did not run , TLE for bigger input coz of n^2
// class Solution {
//     public int superEggDrop(int K, int N) {
//         int[][] dp=new int[K+1][N+1];
//         for(int j=1;j<dp[0].length;j++)
//         {
//             dp[1][j]=j;
//         }
        
//         for(int i=2;i<dp.length;i++)
//         {
//             for(int j=1;j<dp[i].length;j++)
//             {
//                 dp[i][j]=Integer.MAX_VALUE;
//                 for(int l=1;l<=j;l++)
//                 {
//                     dp[i][j]=Math.min(dp[i][j], 1+ Math.max(dp[i-1][l-1] , dp[i][j-l]));
//                 }
//             }
//         }
//         return dp[K][N];
//     }
// }

//time: O(k*n)
//space: O(k*n)
class Solution {
    public int superEggDrop(int K, int N) {
        int[][] dp=new int[N+1][K+1];
        //this is my row
        int attempts=0;
        //do until we have less value than N floors which is given 
         while(dp[attempts][K]<N && attempts<N)
         {
             //increase attempts first as we are starting from 1st row else u ll encounter out of bound below
             attempts++;
             for(int j=1;j<dp[0].length;j++)
             {
                 dp[attempts][j]=1+dp[attempts-1][j-1]+dp[attempts-1][j];
             }
             
         }
        //once the loop breaks means we have greater value at that dp index so that attemot value is the final answer because if n attempts is required for K eggs to go beyond N means that many number of attempts are enough for N.
        return attempts;
    }
}
